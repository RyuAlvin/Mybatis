<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.dynamicsql.dao.BlogMapper">
    <insert id="addBlog" parameterType="blog">
        insert into blog(id, title, author, create_time, views)
        values(#{id}, #{title}, #{author}, #{createTime}, #{views})
    </insert>

    <select id="queryBlogIf" resultType="blog">
        select * from blog where 1 = 1
        <if test="views!=null">
            and views > #{views}
        </if>
        <if test="author!=null">
            and author like #{author}
        </if>
    </select>

    <!--有内容则带上where标签，没内容则不带-->
    <select id="queryBlogWhere" resultType="cn.dynamicsql.pojo.Blog">
        select * from blog
        <where>
            <if test="views!=null">
                views > #{views}
            </if>
            <if test="author!=null">
                author like #{author}
            </if>
        </where>
    </select>

    <!--注意要用逗号隔开-->
    <update id="updateBlog" parameterType="map">
        update blog
        <set>
            <if test="title!=null">
                title = #{title},
            </if>
            <if test="author!=null">
                author = #{author}
            </if>
        </set>
        where id = #{id}
    </update>

    <!--相当于java中的switch-case操作，查询条件有一个满足即可-->
    <select id="queryBlogChoose" resultType="blog" parameterType="map">
        select * from blog
        <where>
            <choose>
                <when test="title!=null">
                    title like #{title}
                </when>
                <when test="author!=null">
                    and author like #{author}
                </when>
                <otherwise>
                    and views > #{views}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--1、最好基于单表来定义SQL片段，提高片段的可重用性-->
    <!--2、在SQL片段中不要包括where-->
    <select id="queryBlogWithFragment" resultType="blog">
        select * from blog
        <where>
            <include refid="WhereChooseSql"></include>
        </where>
    </select>
    <sql id="WhereChooseSql">
        <choose>
            <when test="title!=null">
                title like #{title}
            </when>
            <when test="author!=null">
                and author like #{author}
            </when>
            <otherwise>
                and views > #{views}
            </otherwise>
        </choose>
    </sql>

    <!--collection：指定输入对象中的集合属性
        item：每次遍历生成的对象
        open：开始遍历时的拼接字符串
        close：结束时拼接的字符串
        separator：遍历对象之间需要拼接的字符串
    select * from blog WHERE ( id = ? or id = ? )-->
    <select id="queryBlogForeach1" resultType="blog">
        select * from blog
        <where>
            <foreach item="id" collection="ids" open="(" separator="or" close=")">
                id = #{id}
            </foreach>
        </where>
    </select>

    <select id="queryBlogForeach2" resultType="blog">
        select * from blog
        <where>
            <foreach item="item" collection="list" index="index" open="id in(" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>
</mapper>